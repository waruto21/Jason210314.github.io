<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OneStep</title>
  
  <subtitle>安心搬砖</subtitle>
  <link href="https://wmc1999.top/rss.xml" rel="self"/>
  
  <link href="https://wmc1999.top/"/>
  <updated>2021-12-22T15:35:06.596Z</updated>
  <id>https://wmc1999.top/</id>
  
  <author>
    <name>Naruto210</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust生命周期与变形</title>
    <link href="https://wmc1999.top/2021/04/29/rust-lifetime-variance/"/>
    <id>https://wmc1999.top/2021/04/29/rust-lifetime-variance/</id>
    <published>2021-04-29T02:16:32.000Z</published>
    <updated>2021-12-22T15:35:06.596Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近对 rust 的生命周期有一些疑惑，在找资料学习的过程中自然就了解到由 rust 生命周期导出的 rust subtype、variance 的概念，对这一块儿的学习也解答了我一些对其他语言的问题,同时我也被认识的大佬赶鸭子上架,在 BUPT Rust Meetup 做了分享,&lt;a href=&quot;https://github.com/waruto210/waruto210.github.io/blob/hexo/source/_posts/rust-lifetime-variance/variance_rust.key&quot;&gt;keynote 讲稿在此&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://wmc1999.top/categories/rust/"/>
    
    
    <category term="rust" scheme="https://wmc1999.top/tags/rust/"/>
    
    <category term="variance" scheme="https://wmc1999.top/tags/variance/"/>
    
    <category term="subtype" scheme="https://wmc1999.top/tags/subtype/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab10 mmap</title>
    <link href="https://wmc1999.top/2021/03/03/6-S081-lab10-mmap/"/>
    <id>https://wmc1999.top/2021/03/03/6-S081-lab10-mmap/</id>
    <published>2021-03-03T08:35:52.000Z</published>
    <updated>2021-12-22T15:35:06.556Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;mmap&lt;/code&gt;和&lt;code&gt;munmap&lt;/code&gt;系统调用允许 UNIX 程序对其地址空间进行更为细致的控制。它们可用于在进程间共享内存，将文件映射到进程地址空间，并作为用户级&lt;code&gt;page fault&lt;/code&gt;方案的一部分。在本实验室中，我们将在&lt;code&gt;xv6&lt;/code&gt;中添加&lt;code&gt;mmap&lt;/code&gt;和&lt;code&gt;munmap&lt;/code&gt;系统调用，重点是&lt;code&gt;memory-mapped files&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="mmap" scheme="https://wmc1999.top/tags/mmap/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab9 fs</title>
    <link href="https://wmc1999.top/2021/03/02/6-S081-lab9-fs/"/>
    <id>https://wmc1999.top/2021/03/02/6-S081-lab9-fs/</id>
    <published>2021-03-02T13:03:42.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Large-files&quot;&gt;&lt;a href=&quot;#Large-files&quot; class=&quot;headerlink&quot; title=&quot;Large files&quot;&gt;&lt;/a&gt;Large files&lt;/h1&gt;&lt;p&gt;本关需要为&lt;code&gt;xv6&lt;/code&gt;添加对大文件的支持。&lt;code&gt;xv6&lt;/code&gt;的 inode 默认使用 12 个直接块指针和 1 个间接块指针（指向一个存储着块指针的数据块），所以&lt;code&gt;xv6&lt;/code&gt;支持的最大文件尺寸是&lt;code&gt;12 + 1*256=268&lt;/code&gt;个 block。我们需要将一个直接块指针修改为双重间接块指针（执行一个存储着间接块指针的数据块），将&lt;code&gt;xv6&lt;/code&gt;的最大文件尺寸扩展到&lt;code&gt;11 + 1*256 + 1*256*256= 65803&lt;/code&gt;个 block。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="file system" scheme="https://wmc1999.top/tags/file-system/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab8 lock</title>
    <link href="https://wmc1999.top/2021/03/01/6-S081-lab8-lock/"/>
    <id>https://wmc1999.top/2021/03/01/6-S081-lab8-lock/</id>
    <published>2021-03-01T12:12:11.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;p&gt;在本实验室中，将重新设计代码以提高并行性。在多核机器上，并行性差的一个常见症状是高强度的锁竞争。提高并行性通常需要改变数据结构和加锁策略，以减少争用。您将对 xv6 内存分配器和文件块缓存进行改进。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="lock" scheme="https://wmc1999.top/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab7 thread</title>
    <link href="https://wmc1999.top/2021/02/28/6-S081-lab7-thread/"/>
    <id>https://wmc1999.top/2021/02/28/6-S081-lab7-thread/</id>
    <published>2021-02-28T07:55:05.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;p&gt;本实验室将让你熟悉多线程。您将在用户级线程包中实现线程切换；使用多线程来加快程序的速度；并实现一个&lt;code&gt;barrier&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="Multithreading" scheme="https://wmc1999.top/tags/Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab6 cow</title>
    <link href="https://wmc1999.top/2021/02/27/6-S081-lab6-cow/"/>
    <id>https://wmc1999.top/2021/02/27/6-S081-lab6-cow/</id>
    <published>2021-02-27T06:48:15.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Copy-on-Write-Fork-for-xv6&quot;&gt;&lt;a href=&quot;#Copy-on-Write-Fork-for-xv6&quot; class=&quot;headerlink&quot; title=&quot;Copy-on-Write Fork for xv6&quot;&gt;&lt;/a&gt;Copy-on-Write Fork for xv6&lt;/h1&gt;&lt;p&gt;这次 lab 只有一关，那就是为&lt;code&gt;xv6&lt;/code&gt;实现&lt;code&gt;copy on write&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xv6&lt;/code&gt;中的&lt;code&gt;fork()&lt;/code&gt;系统调用将父进程的用户内存全部复制到子进程中。如果父进程内存占用很大，复制可能需要很长的时间。更糟糕的是，通常来说，这个复制在很大程度上是浪费的；例如，在子进程中，&lt;code&gt;fork()&lt;/code&gt;之后的&lt;code&gt;exec()&lt;/code&gt;调用会导致子进程丢弃复制的内存，可能大部分内存都没有来得及使用。另一方面，如果父子双方都使用一个&lt;code&gt;page&lt;/code&gt;，并且其中一方或双方需要写这个&lt;code&gt;page&lt;/code&gt;，那么确实需要复制。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="cow" scheme="https://wmc1999.top/tags/cow/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab5 lazy</title>
    <link href="https://wmc1999.top/2021/02/25/6-S081-lab5-lazy/"/>
    <id>https://wmc1999.top/2021/02/25/6-S081-lab5-lazy/</id>
    <published>2021-02-25T13:46:35.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Eliminate-allocation-from-sbrk&quot;&gt;&lt;a href=&quot;#Eliminate-allocation-from-sbrk&quot; class=&quot;headerlink&quot; title=&quot;Eliminate allocation from sbrk()&quot;&gt;&lt;/a&gt;Eliminate allocation from sbrk()&lt;/h1&gt;&lt;p&gt;这次实验的第一关非常简单，就是从&lt;code&gt;sbrk&lt;/code&gt;调用中取消内存分配，为之后的&lt;code&gt;lay allocation&lt;/code&gt;做准备。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uint64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys_sbrk(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;n) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;proc&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt; =&lt;/span&gt; myproc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addr = p-&amp;gt;sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p-&amp;gt;sz += n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="lazy allocation" scheme="https://wmc1999.top/tags/lazy-allocation/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab4 traps</title>
    <link href="https://wmc1999.top/2021/02/24/6-S081-lab4-traps/"/>
    <id>https://wmc1999.top/2021/02/24/6-S081-lab4-traps/</id>
    <published>2021-02-24T16:35:58.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;RISC-V-assembly&quot;&gt;&lt;a href=&quot;#RISC-V-assembly&quot; class=&quot;headerlink&quot; title=&quot;RISC-V assembly&quot;&gt;&lt;/a&gt;RISC-V assembly&lt;/h1&gt;&lt;p&gt;这是一个简单的&lt;code&gt;RISC-V&lt;/code&gt;汇编热身关卡。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="traps" scheme="https://wmc1999.top/tags/traps/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 lab3 page tables</title>
    <link href="https://wmc1999.top/2021/02/22/6-S081-lab3-page-tables/"/>
    <id>https://wmc1999.top/2021/02/22/6-S081-lab3-page-tables/</id>
    <published>2021-02-22T13:55:37.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;前两个 lab 比较基础，就不写博客记录了，于是从 lab3 开始。&lt;/p&gt;
&lt;p&gt;环境配置参考&lt;a href=&quot;https://pdos.csail.mit.edu/6.S081/2020/tools.html&quot;&gt;官网&lt;/a&gt; 。如果使用&lt;code&gt;ubuntu20.04&lt;/code&gt;的话，环境配置比较简单，只需要从&lt;a href=&quot;https://www.qemu.org/download/#source&quot;&gt;qemu 官网&lt;/a&gt;下载源码，手动 build 就完成了；或者使用&lt;code&gt;archlinux&lt;/code&gt;，一条命令便全部配置完成。笔者使用的平台是&lt;code&gt;macOS 11.2.1&lt;/code&gt;，使用&lt;code&gt;homebrew&lt;/code&gt;安装的&lt;code&gt;qemu&lt;/code&gt;在前两个 lab 没有问题，但是在第三个 lab 出现了 crash，改为从源码手动编译安装&lt;code&gt;qemu 5.1.0&lt;/code&gt;解决了。&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://wmc1999.top/categories/OS/"/>
    
    
    <category term="6.S081" scheme="https://wmc1999.top/tags/6-S081/"/>
    
    <category term="page table" scheme="https://wmc1999.top/tags/page-table/"/>
    
  </entry>
  
  <entry>
    <title>告别2020庚子鼠年</title>
    <link href="https://wmc1999.top/2021/02/11/goodbyte-2020/"/>
    <id>https://wmc1999.top/2021/02/11/goodbyte-2020/</id>
    <published>2021-02-11T13:19:38.000Z</published>
    <updated>2021-12-22T15:35:06.592Z</updated>
    
    
    <summary type="html">&lt;p&gt;2020 庚子鼠年，在家上了半年网课，慵懒地躺尸，同时又在焦虑感的驱使下战战兢兢地当个做题家。而后，二进宫实习，同时参加夏令营，拿到 offer；国庆离职，进入实验室，成为临时工。一直在忙碌，一直在焦虑。&lt;/p&gt;</summary>
    
    
    
    <category term="感想" scheme="https://wmc1999.top/categories/%E6%84%9F%E6%83%B3/"/>
    
    
    <category term="新年" scheme="https://wmc1999.top/tags/%E6%96%B0%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>Rust智能指针Cow</title>
    <link href="https://wmc1999.top/2021/01/30/Rust-Smartpointer-Cow/"/>
    <id>https://wmc1999.top/2021/01/30/Rust-Smartpointer-Cow/</id>
    <published>2021-01-30T15:26:30.000Z</published>
    <updated>2021-12-22T15:35:06.584Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Cow&lt;/code&gt;是一个提供了写时克隆功能的智能指针，它可以包装对数据的借用，当需要修改数据或者获取数据的所有权时，对数据&lt;code&gt;clone&lt;/code&gt;。它的定义如下：&lt;/p&gt;</summary>
    
    
    
    <category term="rust" scheme="https://wmc1999.top/categories/rust/"/>
    
    
    <category term="cow" scheme="https://wmc1999.top/tags/cow/"/>
    
    <category term="rust" scheme="https://wmc1999.top/tags/rust/"/>
    
    <category term="智能指针" scheme="https://wmc1999.top/tags/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>CMake Tutorial</title>
    <link href="https://wmc1999.top/2020/10/29/CMake-Tutorial/"/>
    <id>https://wmc1999.top/2020/10/29/CMake-Tutorial/</id>
    <published>2020-10-29T06:09:24.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近因为毕设的原因，需要看 Cpp 项目，首先项目构建就涉及到了 CMake，所以跟着 CMake 官网的 Tutorial 学习了一下，该文章算是官网教程的搬运。&lt;br&gt;&lt;a href=&quot;https://cmake.org/cmake/help/latest/guide/tutorial/index.html&quot;&gt;Tutorial 点这里&lt;/a&gt;, &lt;a href=&quot;https://github.com/Kitware/CMake/tree/master/Help/guide/tutorial&quot;&gt;GitHub 代码点这里&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="构建工具" scheme="https://wmc1999.top/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="CMake" scheme="https://wmc1999.top/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>Linux使用clash代理</title>
    <link href="https://wmc1999.top/2020/08/21/Linux-clash-proxy/"/>
    <id>https://wmc1999.top/2020/08/21/Linux-clash-proxy/</id>
    <published>2020-08-21T01:19:53.000Z</published>
    <updated>2021-12-22T15:35:06.564Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;偶然发现百度云的学生服务器挺便宜，2 核心 4g 内存机型一个月只要 18 元，有个随时随地能够访问的 Linux 环境还是挺好的，遂购入。新系统初始化完成，第一件事当然是来一套&lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh&quot;&gt;&lt;code&gt;ohmyzsh&lt;/code&gt;&lt;/a&gt;，结果这就出了问题，&lt;code&gt;git clone&lt;/code&gt;太慢了。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://wmc1999.top/categories/Linux/"/>
    
    
    <category term="clash" scheme="https://wmc1999.top/tags/clash/"/>
    
    <category term="代理" scheme="https://wmc1999.top/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Github Actions简介</title>
    <link href="https://wmc1999.top/2020/06/19/Github-Actions-Intro/"/>
    <id>https://wmc1999.top/2020/06/19/Github-Actions-Intro/</id>
    <published>2020-06-19T15:39:07.000Z</published>
    <updated>2021-12-22T15:35:06.564Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;GitHub Actions&lt;/code&gt;可帮助开发人员在软件开发生命周期内自动化任务。 GitHub Actions 是事件驱动的，这意味着可以在发生指定事件后运行一系列命令。例如，每当有人为仓库新建&lt;code&gt;pr&lt;/code&gt;时，可以自动运行测试脚本。&lt;/p&gt;</summary>
    
    
    
    <category term="github" scheme="https://wmc1999.top/categories/github/"/>
    
    
    <category term="CI/CD" scheme="https://wmc1999.top/tags/CI-CD/"/>
    
    <category term="gitpages" scheme="https://wmc1999.top/tags/gitpages/"/>
    
  </entry>
  
  <entry>
    <title>20年字节跳动后端开发面试</title>
    <link href="https://wmc1999.top/2020/04/17/2020-bytedance-backend-intern/"/>
    <id>https://wmc1999.top/2020/04/17/2020-bytedance-backend-intern/</id>
    <published>2020-04-17T16:17:43.000Z</published>
    <updated>2021-12-22T15:35:06.556Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;第一轮面试&quot;&gt;&lt;a href=&quot;#第一轮面试&quot; class=&quot;headerlink&quot; title=&quot;第一轮面试&quot;&gt;&lt;/a&gt;第一轮面试&lt;/h1&gt;&lt;p&gt;首先自我介绍&lt;/p&gt;
&lt;h2 id=&quot;开发知识&quot;&gt;&lt;a href=&quot;#开发知识&quot; class=&quot;headerlink&quot; title=&quot;开发知识&quot;&gt;&lt;/a&gt;开发知识&lt;/h2&gt;&lt;p&gt;问我比较熟悉什么语言，答&lt;code&gt;Java&lt;/code&gt;，遂开始问&lt;code&gt;Java&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;讲讲&lt;code&gt;HashMap&lt;/code&gt;实现原理，&lt;code&gt;HashTable&lt;/code&gt;和&lt;code&gt;HashMap&lt;/code&gt;有什么不同？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;讲讲&lt;code&gt;ConcurrentHashMap&lt;/code&gt;怎么实现的，有什么特点？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Object&lt;/code&gt;的&lt;code&gt;wait()&lt;/code&gt;和&lt;code&gt;notify()&lt;/code&gt;方法有什么作用？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;讲讲&lt;code&gt;Jvm&lt;/code&gt;内存结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;synchronized&lt;/code&gt;和&lt;code&gt;Lock&lt;/code&gt;在 API/使用上有什么不同？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解过&lt;code&gt;Redis&lt;/code&gt;吗，&lt;code&gt;Redis&lt;/code&gt;有哪些常见数据结构？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;剩余的记不清了…&lt;/p&gt;</summary>
    
    
    
    <category term="面经" scheme="https://wmc1999.top/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="https://wmc1999.top/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="后端" scheme="https://wmc1999.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://wmc1999.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装tf-gpu</title>
    <link href="https://wmc1999.top/2019/02/01/Ubuntu-install-tf-gpu/"/>
    <id>https://wmc1999.top/2019/02/01/Ubuntu-install-tf-gpu/</id>
    <published>2019-02-01T09:06:10.000Z</published>
    <updated>2021-12-22T15:35:06.588Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;显卡驱动&quot;&gt;&lt;a href=&quot;#显卡驱动&quot; class=&quot;headerlink&quot; title=&quot;显卡驱动&quot;&gt;&lt;/a&gt;显卡驱动&lt;/h1&gt;&lt;p&gt;最新的 18.04.3 已经可以安装 430 驱动&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install nvidia-driver-430&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://wmc1999.top/categories/Linux/"/>
    
    
    <category term="tensorflow-gpu" scheme="https://wmc1999.top/tags/tensorflow-gpu/"/>
    
  </entry>
  
  <entry>
    <title>Python ElementTree数据清洗</title>
    <link href="https://wmc1999.top/2018/12/09/Python-dataclean/"/>
    <id>https://wmc1999.top/2018/12/09/Python-dataclean/</id>
    <published>2018-12-09T09:14:11.000Z</published>
    <updated>2021-12-22T15:35:06.584Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;XML 是一种可扩展标记语言，被用来传输和存储数据。它是一种有逻辑的树结构。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://wmc1999.top/categories/Python/"/>
    
    
    <category term="数据清洗" scheme="https://wmc1999.top/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
    <category term="XML" scheme="https://wmc1999.top/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>CS:APP Attack lab</title>
    <link href="https://wmc1999.top/2018/12/08/CSAPP-Attack-lab/"/>
    <id>https://wmc1999.top/2018/12/08/CSAPP-Attack-lab/</id>
    <published>2018-12-08T09:49:57.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;实验描述&quot;&gt;&lt;a href=&quot;#实验描述&quot; class=&quot;headerlink&quot; title=&quot;实验描述&quot;&gt;&lt;/a&gt;实验描述&lt;/h1&gt;&lt;p&gt;本次实验利用程序需要外部输入的特点，输入机器码对程序返回值覆盖，以达到攻击的目的，即在 getbuf 函数需要的输入中做手脚，以致不能正常返回，执行攻击代码。&lt;/p&gt;</summary>
    
    
    
    <category term="CS:APP" scheme="https://wmc1999.top/categories/CS-APP/"/>
    
    
    <category term="CS:APP" scheme="https://wmc1999.top/tags/CS-APP/"/>
    
  </entry>
  
  <entry>
    <title>CS:APP Bomb lab</title>
    <link href="https://wmc1999.top/2018/12/01/CSAPP-Bomb-lab/"/>
    <id>https://wmc1999.top/2018/12/01/CSAPP-Bomb-lab/</id>
    <published>2018-12-01T09:20:21.000Z</published>
    <updated>2021-12-22T15:35:06.560Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;实验步骤&quot;&gt;&lt;a href=&quot;#实验步骤&quot; class=&quot;headerlink&quot; title=&quot;实验步骤&quot;&gt;&lt;/a&gt;实验步骤&lt;/h1&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;tar -vxf&lt;/code&gt;将炸弹压缩包解压,cd 进入,可以从 bomb.c 中看出实验的用意以及程序的大致&lt;br&gt;逻辑,bomb 为可执行程序,使用 gdb 调试该程序.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(gdb) b read_line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Breakpoint 1 at 0x40155c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gdb) b explode_bomb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Breakpoint 2 at 0x4014e4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;给 read_line 函数打上断点,以便每次输入运行一关.给 explode_bomb 打上断点,以便在炸弹爆炸&lt;br&gt;前可以处理.&lt;/p&gt;</summary>
    
    
    
    <category term="CS:APP" scheme="https://wmc1999.top/categories/CS-APP/"/>
    
    
    <category term="CS:APP" scheme="https://wmc1999.top/tags/CS-APP/"/>
    
    <category term="汇编" scheme="https://wmc1999.top/tags/%E6%B1%87%E7%BC%96/"/>
    
    <category term="二进制炸弹" scheme="https://wmc1999.top/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%82%B8%E5%BC%B9/"/>
    
  </entry>
  
  <entry>
    <title>数据结构:BM算法</title>
    <link href="https://wmc1999.top/2018/12/01/ds-bm/"/>
    <id>https://wmc1999.top/2018/12/01/ds-bm/</id>
    <published>2018-12-01T08:00:31.000Z</published>
    <updated>2021-12-22T15:35:06.592Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;设计思路&quot;&gt;&lt;a href=&quot;#设计思路&quot; class=&quot;headerlink&quot; title=&quot;设计思路&quot;&gt;&lt;/a&gt;设计思路&lt;/h1&gt;&lt;p&gt;BM 算法是一种后缀匹配算法,其具有比 KMP 算法更优秀的性能表现.其核心思想有二&lt;br&gt;,第一是坏字符,坏字符就是 pattern 与 text 从右往左第一失配的在 text 中的字符,&lt;br&gt;二是好后缀,好后缀就是 pattern 与 text 从右往左连续匹配成功的子串.对于坏字符&lt;br&gt;和好后缀,有各自的模式串移动规则,可以确定各自失配时需要移动的位数,最终选&lt;br&gt;择二者中移动位数较大者移动.在主函数中,让用户输入文档名与需要查找的单词.&lt;br&gt;每次从文档中读取一行进行匹配搜索,每次使用 BM 算法搜索完成后,若搜索到单词,&lt;br&gt;则将主串中开始匹配的位置定为查找到单词的下一行,使用 BM 算法进行下一个匹配&lt;br&gt;搜索,直至搜索完当前行.而后循环直至匹配完整个文档.&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://wmc1999.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="串匹配" scheme="https://wmc1999.top/tags/%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>数据结构:迷宫问题</title>
    <link href="https://wmc1999.top/2018/11/10/ds-maze/"/>
    <id>https://wmc1999.top/2018/11/10/ds-maze/</id>
    <published>2018-11-10T06:31:06.000Z</published>
    <updated>2021-12-22T15:35:06.592Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;设计思路&quot;&gt;&lt;a href=&quot;#设计思路&quot; class=&quot;headerlink&quot; title=&quot;设计思路&quot;&gt;&lt;/a&gt;设计思路&lt;/h1&gt;&lt;h2 id=&quot;图编号&quot;&gt;&lt;a href=&quot;#图编号&quot; class=&quot;headerlink&quot; title=&quot;图编号&quot;&gt;&lt;/a&gt;图编号&lt;/h2&gt;&lt;p&gt;如图所示，从上到下，从左到右，给 17 个顶点进行编号，以两个顶点代表一条边，例入 2-3 代表可以从顶点 2 走到顶点 3。问题即为求解从 2 -&amp;gt; 17 的通路。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://wmc1999.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://wmc1999.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="迷宫问题" scheme="https://wmc1999.top/tags/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CS:APP解题记录</title>
    <link href="https://wmc1999.top/2018/11/08/CSAPP-problems/"/>
    <id>https://wmc1999.top/2018/11/08/CSAPP-problems/</id>
    <published>2018-11-08T13:52:23.000Z</published>
    <updated>2021-12-22T15:35:06.564Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;CS-APP-2-60&quot;&gt;&lt;a href=&quot;#CS-APP-2-60&quot; class=&quot;headerlink&quot; title=&quot;CS:APP 2.60&quot;&gt;&lt;/a&gt;CS:APP 2.60&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;replace_byte&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x = x &amp;amp; (~(&lt;span class=&quot;number&quot;&gt;0XFF&lt;/span&gt; &amp;lt;&amp;lt; (i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)));&lt;span class=&quot;comment&quot;&gt;//相应字节置零&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x = x | (b &amp;lt;&amp;lt; (i &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));      &lt;span class=&quot;comment&quot;&gt;//相应字节改为char b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; ret = replace_byte(&lt;span class=&quot;number&quot;&gt;0X12345678&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0XAB&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;0X%X\n&amp;quot;&lt;/span&gt;, ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;0X1234AB78&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用按位运算$x \&amp;amp; 1 = x , b | 0 = b$。&lt;/p&gt;</summary>
    
    
    
    <category term="CS:APP" scheme="https://wmc1999.top/categories/CS-APP/"/>
    
    
    <category term="CS:APP" scheme="https://wmc1999.top/tags/CS-APP/"/>
    
  </entry>
  
</feed>
