<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - OneStep</title><link>https://wmc1999.top/posts/</link><description>所有文章 | OneStep</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>wmc314@outlook.com (waruto210)</managingEditor><webMaster>wmc314@outlook.com (waruto210)</webMaster><lastBuildDate>Wed, 27 Apr 2022 06:48:22 +0800</lastBuildDate><atom:link href="https://wmc1999.top/posts/" rel="self" type="application/rss+xml"/><item><title>MIT 6.830 Lab6 Rollback and Recovery</title><link>https://wmc1999.top/posts/mit-6.830-lab6-rollback-and-recovery/</link><pubDate>Wed, 27 Apr 2022 06:48:22 +0800</pubDate><author>作者</author><guid>https://wmc1999.top/posts/mit-6.830-lab6-rollback-and-recovery/</guid><description>简介 在lab4中，我们实现的事务是基于NO STEAL/FORCE的，no steal会影响BufferPool的可用空间；且真实场景中如果每次</description></item><item><title>MIT 6.830 Lab5 SimpleDB BTree Index</title><link>https://wmc1999.top/posts/mit-6.830-lab5-simpledb-btree-index/</link><pubDate>Wed, 27 Apr 2022 05:44:31 +0800</pubDate><author>作者</author><guid>https://wmc1999.top/posts/mit-6.830-lab5-simpledb-btree-index/</guid><description>简介 实现前4个lab后，SimpleDB已经是一个支持事务和CRUD的简单数据库了，但是性能太低了随便一个点查询或者范围查询，都要扫描整个t</description></item><item><title>MIT 6.830 Lab4 SimpleDB Transactions</title><link>https://wmc1999.top/posts/mit-6.830-lab4-simpledb-transactions/</link><pubDate>Wed, 27 Apr 2022 04:47:40 +0800</pubDate><author>作者</author><guid>https://wmc1999.top/posts/mit-6.830-lab4-simpledb-transactions/</guid><description>简介 完成前三个lab，SimpleDB已经具有基本的CRUD的能力，但是还缺少事务。本lab需要实现一个简单的基于锁的事务管理系统。需要在代</description></item><item><title>MIT 6.830 Lab3 Query Optimization</title><link>https://wmc1999.top/posts/mit-6.830-lab3-query-optimization/</link><pubDate>Wed, 27 Apr 2022 03:32:08 +0800</pubDate><author>作者</author><guid>https://wmc1999.top/posts/mit-6.830-lab3-query-optimization/</guid><description>简介 在lab2中，实现了SimpleDB中的operator，对operator进行组合，就可以执行查询了，涉及查询，就应当进行查询优化了。</description></item><item><title>MIT 6.830 Lab2 Operators</title><link>https://wmc1999.top/posts/mit-6.830-lab2-operators/</link><pubDate>Wed, 27 Apr 2022 01:27:58 +0800</pubDate><author>作者</author><guid>https://wmc1999.top/posts/mit-6.830-lab2-operators/</guid><description>简介 lab1中实现了SeqScan operator，它作为后续所有operator读取数据的基础。lab2中将继续实现其他的operator</description></item><item><title>MIT 6.830 Lab1</title><link>https://wmc1999.top/posts/mit-6.830-lab1/</link><pubDate>Mon, 25 Apr 2022 16:25:30 +0800</pubDate><author>作者</author><guid>https://wmc1999.top/posts/mit-6.830-lab1/</guid><description>简介 6.830/6.814是MIT的关系型数据库入门课程，SimpleDB作为课程实验，实现了基础的数据库功能，学生需要实现其中缺少的核心模</description></item><item><title>Rust生命周期与变形</title><link>https://wmc1999.top/posts/rust-lifetime-variance/</link><pubDate>Thu, 29 Apr 2021 10:16:32 +0000</pubDate><author>作者</author><guid>https://wmc1999.top/posts/rust-lifetime-variance/</guid><description>最近对 rust 的生命周期有一些疑惑，在找资料学习的过程中自然就了解到由 rust 生命周期导出的 rust subtype、variance 的概念，对这一块儿的学习也</description></item><item><title>6.S081 lab10 mmap</title><link>https://wmc1999.top/posts/6-s081-lab10-mmap/</link><pubDate>Wed, 03 Mar 2021 16:35:52 +0000</pubDate><author>作者</author><guid>https://wmc1999.top/posts/6-s081-lab10-mmap/</guid><description>mmap和munmap系统调用允许 UNIX 程序对其地址空间进行更为细致的控制。它们可用于在进程间共享内存，将文件映射到进程地址空间，并作为用户级p</description></item><item><title>6.S081 lab9 fs</title><link>https://wmc1999.top/posts/6-s081-lab9-fs/</link><pubDate>Tue, 02 Mar 2021 21:03:42 +0000</pubDate><author>作者</author><guid>https://wmc1999.top/posts/6-s081-lab9-fs/</guid><description>Large files 本关需要为xv6添加对大文件的支持。xv6的 inode 默认使用 12 个直接块指针和 1 个间接块指针（指向一个存储着块指针的数据块），所以xv6支持的最</description></item><item><title>6.S081 lab8 lock</title><link>https://wmc1999.top/posts/6-s081-lab8-lock/</link><pubDate>Mon, 01 Mar 2021 20:12:11 +0000</pubDate><author>作者</author><guid>https://wmc1999.top/posts/6-s081-lab8-lock/</guid><description>在本实验室中，将重新设计代码以提高并行性。在多核机器上，并行性差的一个常见症状是高强度的锁竞争。提高并行性通常需要改变数据结构和加锁策略，以</description></item></channel></rss>